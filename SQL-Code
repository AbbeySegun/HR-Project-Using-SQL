/* What is the average salary of all employees? */
SELECT AVG(salary)
FROM employees;


/*Retrieve the details of employees who earn more than the average salary.*/
SELECT * FROM employees
WHERE salary >  (SELECT AVG(salary)
				FROM employees);

                
/* List the departments with more than five employees.*/        
SELECT department_id, COUNT(*) AS dept_count
FROM employees
GROUP BY 1
HAVING dept_count > 5;

SELECT *
FROM employees AS e    
RIGHT JOIN (SELECT department_id, COUNT(*)
			FROM employees
			GROUP BY department_id
			HAVING COUNT(*) > 5) AS le
ON e.department_id = le.department_id;


        
/* Find the employee with the highest salary. */
SELECT *
FROM employees
ORDER BY salary DESC
LIMIT 1;



/* Display the employees who work in the department with the lowest average */
SELECT *
FROM employees
WHERE department_id = (
		SELECT department_id
		FROM employees
		GROUP BY 1
        ORDER BY AVG(salary) ASC
        LIMIT 1);



/* Get the names of employees who work in the same department as John Smith  */
SELECT * FROM employees
WHERE department_id = (SELECT department_id
		FROM employees
		WHERE employee_id = '101');


        
/* Find the department ID and name where the employee with ID 103 works. */
SELECT DEPARTMENT_ID, DEPARTMENT_NAME
FROM departments
WHERE DEPARTMENT_ID = (
		 SELECT department_id
         FROM employees
         WHERE employee_id = 103);


         
/* List the employees who joined the company before their managers. */ 
 SELECT * FROM (SELECT manager_id
 FROM employees);


 
/* Show the employees who earn more than the average salary of their department. */
SELECT * FROM employees
WHERE salary > (SELECT AVG(salary)
				FROM employees);



/* Find the employees who are not assigned to any department. */  
SELECT * FROM employees
WHERE department_id IS NULL;     



/*List the employees who earn more than the average salary of their department and have the highest salary in their department.*/     
SELECT * FROM employees
WHERE salary > (SELECT AVG(salary)
				FROM employees);



/*Find the employees who joined after their managers did.*/
SELECT * FROM employees AS e
LEFT JOIN (SELECT *
			FROM employees
            WHERE e.employee_id > m.) AS m
USING(employee_id)            
WHERE e.employee_id = m.employee_id);


                
/*Calculate the running total of salaries for each department, ordered by hire date.
*/    
SELECT d.department_name, 
        SUM(e.salary) OVER(ORDER BY e.hire_date ASC) AS Salary_RT
FROM employees AS e
LEFT JOIN departments AS d
USING(department_id);

WITH sub AS (
			SELECT d.department_name AS department, 
				e.salary AS Salary, e.hire_date
			FROM employees AS e
			LEFT JOIN departments AS d
			USING(department_id)
            )
SELECT department, salary, SUM(salary) OVER(PARTITION BY department ORDER BY hire_date ASC) AS salary_RT
FROM sub;         



/*Rank employees based on their salary within each department. */
SELECT e.full_name, 
		d.department_name, 
        e.salary AS Salary, 
        RANK() OVER(PARTITION BY d.department_name ORDER BY e.salary ASC) AS salary_rank
FROM employees AS e
LEFT JOIN departments AS d
USING(department_id);



/*Get the average salary for each department alongside each employee's salary.*/
SELECT e.full_name, 
		COALESCE(d.department_name, 'CEO') AS department_name,
        e.salary AS Salary, 
        AVG(salary) OVER(partition by department_name) AS avg_salary,
        (SELECT AVG(salary)
        FROM employees AS su
        WHERE e.department_id = su.department_id) AS avg_salary
FROM employees AS e
LEFT JOIN departments AS d
USING(department_id);



/*Find the difference between each employee's salary and the average salary */
SELECT e.full_name, 
		COALESCE(d.department_name, 'CEO') AS department_name,
        e.salary AS Salary, 
        AVG(salary) OVER(partition by department_name) AS avg_salary,
        ROUND((e.salary - AVG(salary) OVER(partition by department_name)), 2) AS salary_diff,
        CASE WHEN (ROUND((e.salary - AVG(salary) OVER(partition by department_name)), 2)) < 0 THEN 'poor_staff'
			WHEN (ROUND((e.salary - AVG(salary) OVER(partition by department_name)), 2)) > 0 THEN 'rich_staff'
            ELSE 'middle_staff' END AS status
FROM employees AS e
LEFT JOIN departments AS d
USING(department_id);



/*count the number of employees living below their department average*/
WITH sub AS (
		SELECT e.full_name, 
		COALESCE(d.department_name, 'CEO') AS department_name,
        e.salary AS Salary, 
        AVG(salary) OVER(partition by department_name) AS avg_salary,
        ROUND((e.salary - AVG(salary) OVER(partition by department_name)), 2) AS salary_diff,
        CASE WHEN (ROUND((e.salary - AVG(salary) OVER(partition by department_name)), 2)) < 0 THEN 'poor_staff'
			WHEN (ROUND((e.salary - AVG(salary) OVER(partition by department_name)), 2)) > 0 THEN 'rich_staff'
            ELSE 'middle_staff' END AS status
FROM employees AS e
LEFT JOIN departments AS d
USING(department_id))

SELECT department_name, status, COUNT(status)
FROM sub
GROUP BY 1, 2;



/*Show the top 3 highest-paid employees in each department*/
SELECT * FROM employees
ORDER BY salary DESC
LIMIT 3;



/*Retrieve the employee with the lowest salary in each department*/
SELECT * FROM employees
ORDER BY salary ASC
LIMIT 3;


/*Calculate the moving average salary for each employee over their last 3 records*/
SELECT full_name, 
        salary,
        AVG(salary) OVER(ORDER BY salary ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING) AS avg_salary
FROM employees;



/*Find the minimum and maximum salary in each department*/
SELECT
    DISTINCT department_name,
    MIN(salary) OVER (PARTITION BY department_id) AS min_salary,
    MAX(salary) OVER (PARTITION BY department_id) AS max_salary
FROM employees
LEFT JOIN departments USING (department_id)
ORDER BY department_name;



/*List the employees and their job titles, along with their department names and locations.*/
SELECT
    e.Full_Name, j.job_title, d.DEPARTMENT_NAME, l.city
FROM employees AS e
LEFT JOIN departments AS d USING (department_id)
LEFT JOIN locations AS l ON d.LOCATION_ID = l.location_id
LEFT JOIN jobs AS j ON e.job_id = j.job_id;



/*Find the departments with more than five employees and display the number of employees in each.*/
SELECT department_name, (SELECT COUNT(*) FROM employees AS e WHERE d.DEPARTMENT_ID = e.DEPARTMENT_ID) AS employees
FROM departments AS d
WHERE department_id IN (
						SELECT DEPARTMENT_ID
						FROM employees
						GROUP BY DEPARTMENT_ID
						HAVING COUNT(*) > 5);

SELECT DEPARTMENT_ID, COUNT(*) AS 
FROM employees
GROUP BY DEPARTMENT_ID
HAVING COUNT(*) > 5;
